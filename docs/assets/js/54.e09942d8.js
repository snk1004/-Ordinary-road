(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{160:function(e,t,a){"use strict";a.r(t);var r=a(0),n=Object(r.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h3",{attrs:{id:"dome-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dome-diff","aria-hidden":"true"}},[e._v("#")]),e._v(" dome-diff")]),e._v(" "),a("p",[e._v("##传统 diff 算法")]),e._v(" "),a("h5",{attrs:{id:"计算一棵树形结构转换成另一棵树形结构的最少操作，是一个复杂且值得研究的问题。传统-diff-算法通过循环递归对节点进行依次对比，效率低下，算法复杂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算一棵树形结构转换成另一棵树形结构的最少操作，是一个复杂且值得研究的问题。传统-diff-算法通过循环递归对节点进行依次对比，效率低下，算法复杂","aria-hidden":"true"}},[e._v("#")]),e._v(" 计算一棵树形结构转换成另一棵树形结构的最少操作，是一个复杂且值得研究的问题。传统 diff 算法通过循环递归对节点进行依次对比，效率低下，算法复杂")]),e._v(" "),a("h2",{attrs:{id:"react-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-diff","aria-hidden":"true"}},[e._v("#")]),e._v(" React diff")]),e._v(" "),a("h5",{attrs:{id:"传统-diff-算法的复杂度为-o-n-3-，显然这是无法满足性能要求的。react-通过制定大胆的策略，将-o-n-3-复杂度的问题转换成-o-n-复杂度的问题。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统-diff-算法的复杂度为-o-n-3-，显然这是无法满足性能要求的。react-通过制定大胆的策略，将-o-n-3-复杂度的问题转换成-o-n-复杂度的问题。","aria-hidden":"true"}},[e._v("#")]),e._v(" 传统 diff 算法的复杂度为 O(n^3)，显然这是无法满足性能要求的。React 通过制定大胆的策略，将 O(n^3) 复杂度的问题转换成 O(n) 复杂度的问题。")]),e._v(" "),a("h4",{attrs:{id:"tree-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree-diff","aria-hidden":"true"}},[e._v("#")]),e._v(" tree diff")]),e._v(" "),a("h6",{attrs:{id:"react-对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。","aria-hidden":"true"}},[e._v("#")]),e._v(" React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。")]),e._v(" "),a("h4",{attrs:{id:"component-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#component-diff","aria-hidden":"true"}},[e._v("#")]),e._v(" component diff")]),e._v(" "),a("h6",{attrs:{id:"react-是基于组件构建应用的，对于组件间的比较所采取的策略也是简洁高效。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-是基于组件构建应用的，对于组件间的比较所采取的策略也是简洁高效。","aria-hidden":"true"}},[e._v("#")]),e._v(" React 是基于组件构建应用的，对于组件间的比较所采取的策略也是简洁高效。")]),e._v(" "),a("h6",{attrs:{id:"如果是同一类型的组件，按照原策略继续比较-virtual-dom-tree。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果是同一类型的组件，按照原策略继续比较-virtual-dom-tree。","aria-hidden":"true"}},[e._v("#")]),e._v(" 如果是同一类型的组件，按照原策略继续比较 virtual DOM tree。")]),e._v(" "),a("h6",{attrs:{id:"如果不是，则将该组件判断为-dirty-component，从而替换整个组件下的所有子节点。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果不是，则将该组件判断为-dirty-component，从而替换整个组件下的所有子节点。","aria-hidden":"true"}},[e._v("#")]),e._v(" 如果不是，则将该组件判断为 dirty component，从而替换整个组件下的所有子节点。")]),e._v(" "),a("h6",{attrs:{id:"对于同一类型的组件，有可能其-virtual-dom-没有任何变化，如果能够确切的知道这点那可以节省大量的-diff-运算时间，因此-react-允许用户通过-shouldcomponentupdate-来判断该组件是否需要进行-diff。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对于同一类型的组件，有可能其-virtual-dom-没有任何变化，如果能够确切的知道这点那可以节省大量的-diff-运算时间，因此-react-允许用户通过-shouldcomponentupdate-来判断该组件是否需要进行-diff。","aria-hidden":"true"}},[e._v("#")]),e._v(" 对于同一类型的组件，有可能其 Virtual DOM 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 React 允许用户通过 shouldComponentUpdate() 来判断该组件是否需要进行 diff。")]),e._v(" "),a("h4",{attrs:{id:"element-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-diff","aria-hidden":"true"}},[e._v("#")]),e._v(" element diff")]),e._v(" "),a("h6",{attrs:{id:"当节点处于同一层级时，react-diff-提供了三种节点操作，分别为：insert-markup（插入）、move-existing（移动）和-remove-node（删除）。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当节点处于同一层级时，react-diff-提供了三种节点操作，分别为：insert-markup（插入）、move-existing（移动）和-remove-node（删除）。","aria-hidden":"true"}},[e._v("#")]),e._v(" 当节点处于同一层级时，React diff 提供了三种节点操作，分别为：INSERT_MARKUP（插入）、MOVE_EXISTING（移动）和 REMOVE_NODE（删除）。")]),e._v(" "),a("h6",{attrs:{id:"insert-markup，新的-component-类型不在老集合里，-即是全新的节点，需要对新节点执行插入操作。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insert-markup，新的-component-类型不在老集合里，-即是全新的节点，需要对新节点执行插入操作。","aria-hidden":"true"}},[e._v("#")]),e._v(" INSERT_MARKUP，新的 component 类型不在老集合里， 即是全新的节点，需要对新节点执行插入操作。")]),e._v(" "),a("h6",{attrs:{id:"move-existing，在老集合有新-component-类型，且-element-是可更新的类型，generatecomponentchildren-已调用-receivecomponent，这种情况下-prevchild-nextchild，就需要做移动操作，可以复用以前的-dom-节点。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#move-existing，在老集合有新-component-类型，且-element-是可更新的类型，generatecomponentchildren-已调用-receivecomponent，这种情况下-prevchild-nextchild，就需要做移动操作，可以复用以前的-dom-节点。","aria-hidden":"true"}},[e._v("#")]),e._v(" MOVE_EXISTING，在老集合有新 component 类型，且 element 是可更新的类型，generateComponentChildren 已调用 receiveComponent，这种情况下 prevChild=nextChild，就需要做移动操作，可以复用以前的 DOM 节点。")]),e._v(" "),a("h6",{attrs:{id:"remove-node，老-component-类型，在新集合里也有，但对应的-element-不同则不能直接复用和更新，需要执行删除操作，或者老-component-不在新集合里的，也需要执行删除操作。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remove-node，老-component-类型，在新集合里也有，但对应的-element-不同则不能直接复用和更新，需要执行删除操作，或者老-component-不在新集合里的，也需要执行删除操作。","aria-hidden":"true"}},[e._v("#")]),e._v(" REMOVE_NODE，老 component 类型，在新集合里也有，但对应的 element 不同则不能直接复用和更新，需要执行删除操作，或者老 component 不在新集合里的，也需要执行删除操作。")])])}],!1,null,null,null);t.default=n.exports}}]);